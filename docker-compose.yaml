include:
  - docker-compose-caddy.yaml

volumes:
  django_static_root: {}
  postgres_data: {}

services:
  django: &django
    build:
      context: ..
      dockerfile: ./server/Dockerfile
      labels:
         info.offby1.bridge.git-version: ${GIT_VERSION:-}

    # So I can run e.g. `py-spy top --pid 21` in a shell in the container
    cap_add:                    # for [py-spy](https://github.com/benfred/py-spy?tab=readme-ov-file#how-do-i-run-py-spy-in-kubernetes)
      - SYS_PTRACE

    depends_on:
      populated-with-fake-data:
        condition: service_completed_successfully
      django-collected-static:
        condition: service_completed_successfully
    environment:
      COMPOSE_PROFILES: ${COMPOSE_PROFILES:-}
      DJANGO_SECRET_FILE: /run/secrets/django_secret
      DJANGO_SKELETON_KEY_FILE: /run/secrets/django_skeleton_key
      PGHOST: postgres
      PGPASS: postgres
    ports:
      - "9000:9000"
    secrets:
      - django_secret
      - django_skeleton_key
    init: true                  # https://docs.docker.com/reference/compose-file/services/#init
    volumes:
      - django_static_root:/bridge/project/static_root

    # mount the work tree into the image, so we can edit normally, and those edits are immediately visible in the container
    # Note that you'll still have to manually restart daphne, though.
    # volumes:
    #   - ./project:/bridge/project
    labels:
      caddy: bridge.offby1.info
      caddy.reverse_proxy: "{{upstreams 9000}}"

  django-collected-static:
    <<: *django
    command: "poetry run python manage.py collectstatic --no-input"
    restart: "no"
    ports: []
    depends_on: []

  django-migrated:
    <<: *django
    command: "poetry run python manage.py migrate --noinput"
    restart: "no"
    ports: []
    depends_on:
      - postgres

  populated-with-fake-data:
    <<: *django
    command: "poetry run python manage.py generate_fake_data --players=40"
    restart: "no"
    ports: []
    depends_on:
      django-migrated:
        condition: service_completed_successfully

  postgres:
    image: postgres:17
    environment:
      # only for initializing the db
      POSTGRES_DB: bridge
      POSTGRES_PASSWORD: postgres
    # TODO -- figure out how to tell docker to put the backing store where I want it, or at the very least, figure out
    # where it is
    ports:
      - "5432:5432"

    # Experience shows we need at least one connection per player.  (It looks like we need one connection per SSE
    # client)
    command: ["postgres", "--max_connections=100"]

    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "--username", "postgres"]
      # Runs the healthcheck every 12 hours.  We don't particularly want this, but we are forced to specify *some*
      # interval.
      interval: 12h
      timeout: 10s
      retries: 3

      # This is what we really care about -- it amends the "interval" above, by running the health check every second,
      # stopping after 10 seconds, or if the test succeeds, whichever comes first.
      start_period: 10s
      start_interval: 1s

secrets:
  django_secret:
    environment: "DJANGO_SECRET_KEY"
  django_skeleton_key:
    environment: "DJANGO_SKELETON_KEY"
