include:
  - docker-compose-caddy.yaml

volumes:
  django_static_root: {}
  grafana_data:
  postgres_data: {}
  prom_data:

services:
  django: &django
    build:
      context: ..
      dockerfile: ./server/Dockerfile
      labels:
         info.offby1.bridge.git-version: ${GIT_VERSION:-}

    # So I can run e.g. `py-spy top --pid 21` in a shell in the container
    cap_add:                    # for [py-spy](https://github.com/benfred/py-spy?tab=readme-ov-file#how-do-i-run-py-spy-in-kubernetes)
      - SYS_PTRACE

    depends_on:
      django-collected-static:
        condition: service_completed_successfully
      django-migrated:
        condition: service_completed_successfully
    environment:
      COMPOSE_PROFILES: ${COMPOSE_PROFILES:-}
      DJANGO_SECRET_FILE: /run/secrets/django_secret
      DJANGO_SKELETON_KEY_FILE: /run/secrets/django_skeleton_key
      DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE:-}
      DOCKER_CONTEXT: ${DOCKER_CONTEXT:-} # so each machine "knows" where it is -- orbstack, hetz, ls, &c
      PGHOST: postgres
      PGPASS: postgres
      PYROSCOPE_HOST: pyroscope

    networks:
      - bridge_tournament_net

    ports:
      - "127.0.0.1:9000:9000"
    secrets:
      - django_secret
      - django_skeleton_key
    init: true                  # https://docs.docker.com/reference/compose-file/services/#init
    volumes:
      - django_static_root:/bridge/project/static_root

    labels:
      caddy: ${CADDY_HOSTNAME:-}
      caddy.reverse_proxy: "{{upstreams 9000}}"

    develop:
      # Create a `watch` configuration to update the app
      # https://docs.docker.com/compose/file-watch/#compose-watch-versus-bind-mounts
      watch:
        # Sync the working directory with the `/app` directory in the container
        - action: sync+restart
          path: ./project
          target: /bridge/project
  django-collected-static:
    <<: *django
    command: "poetry run python manage.py collectstatic --no-input"
    restart: "no"
    ports: []
    depends_on: []

  django-migrated:
    <<: *django
    command: "poetry run python manage.py migrate --noinput"
    restart: "no"
    ports: []
    depends_on:
      - postgres

  postgres:
    image: postgres:17
    environment:
      # only for initializing the db
      POSTGRES_DB: bridge
      POSTGRES_PASSWORD: postgres

    networks:
      - bridge_tournament_net

    ports:
      - "127.0.0.1:5432:5432"

    # Experience shows we need at least one connection per player.  (It looks like we need one connection per SSE
    # client)

    # "--log_statement=all", "--log_min_duration_statement=0" are handy for exploring performance
    # https://www.postgresql.org/docs/17/config-setting.html#CONFIG-SETTING-SHELL
    command: ["postgres", "--max_connections=200", "--log_min_duration_statement=100"]

    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "--username", "postgres"]
      # Runs the healthcheck every 12 hours.  We don't particularly want this, but we are forced to specify *some*
      # interval.
      interval: 12h
      timeout: 10s
      retries: 3

      # This is what we really care about -- it amends the "interval" above, by running the health check every second,
      # stopping after 10 seconds, or if the test succeeds, whichever comes first.
      start_period: 10s
      start_interval: 1s

  postgres-exporter:
    environment:
      - DATA_SOURCE_URI=postgres:5432/postgres?sslmode=disable
      - DATA_SOURCE_USER=postgres
      - DATA_SOURCE_PASS=postgres
    image: quay.io/prometheuscommunity/postgres-exporter

    networks:
      - bridge_tournament_net

  # Cadged from https://github.com/docker/awesome-compose/blob/master/prometheus-grafana/compose.yaml
  grafana:
    build: grafana
    depends_on:
      - pyroscope
    networks:
      - bridge_tournament_net
      - prometheus

    ports:
      - "127.0.0.1:3000:3000"
    restart: unless-stopped
    environment:
      - GF_DATE_FORMATS_DEFAULT_TIMEZONE=UTC
      - GF_SECURITY_ADMIN_PASSWORD=grafana
      - GF_SECURITY_ADMIN_USER=admin
    volumes:
      - grafana_data:/var/lib/grafana # saves preferences, I hope

  prometheus:
    build: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

    depends_on:
      - postgres-exporter

    networks:
      - bridge_tournament_net

    ports:
      - "127.0.0.1:9090:9090"
    restart: unless-stopped
    volumes:
      - prom_data:/prometheus

  pyroscope:
    image: grafana/pyroscope
    networks:
      - bridge_tournament_net
    ports:
      - "127.0.0.1:4040:4040"

secrets:
  django_secret:
    environment: "DJANGO_SECRET_KEY"
  django_skeleton_key:
    environment: "DJANGO_SKELETON_KEY"

networks:
  bridge_tournament_net:
    driver: bridge              # the name is an annoying coincidence
