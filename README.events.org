# Inventory of django eventstream events that I send

WARNING: I find I do not keep this up to date :-|

This is getting confusing.  I should have a simple rule about which messages get sent when & where.

The "When" should be: "most messages correspond to the insertion of a row in the db".

New row in app_table: message, with the row's content, more or less
New row in app_calls: "
New row in app_plays: "
New row in app_hands: "
One exception: once we've determined which play won a trick, that deserves a message too, probably.

Lucky for me almost all the modifications to the db are indeed inserts of new immutable rows.  The play that wins its trick is the one exception.

## Specific to playing a hand *or* creation of a new model instance

| content (always JSON)          | sender                                          | recipient channel                 | what model is getting an insert? | notes                              |
|--------------------------------+-------------------------------------------------+-----------------------------------+----------------------------------+------------------------------------|
| "new-board": serialized board  | BoardManager.create                             | top-sekrit-board-creation-channel | Board, duh                       | not yet used                       |
| "new-call": serialized call    | CallManager.create                              | table.pk, all-tables              | Call, duh                        |                                    |
| "new-hand": serialized hand    | HandManager.create                              | table.pk, all-tables              | Hand, duh                        |                                    |
| "new-play": serialized play    | PlayManager.create                              | table.pk, all-tables              | Play, duh                        |                                    |
| table, contract, contract_text | hand.add_call_from_player                       | table.pk, all-tables              | n/a [2]                          | when the auction has settled       |
| table, final_score             | hand.xscript                                    | table.pk, all-tables              | n/a [1]                          | when the last card has been played |
| table, seats, action           | table.TableManager.create_with_two_partnerships | all-tables                        | Table                            |                                    |

[1] -- This is a side-effect of adding a new play (namely: the 52nd play), but doesn't *directly* correspond to an insert, in that we add lots of plays without sending this event!
[2] -- Exactly analoagous to [1] above -- this is a side-effect of adding a new call.

## Everything else

| content                        | sender                     | recipient channel   | notes                                            |
|--------------------------------+----------------------------+---------------------+--------------------------------------------------|
| arbitrary html                 | models.player              | lobby, partnerships | partnership created or destroyed                 |
| arbitrary html                 | lobby.send_lobby_message   | lobby               | I don't think anyone listens for these           |
| arbitrary                      | player.send_player_message | player1:player2     | private chat                                     |
| json: table, direction, action | table.poke_de_bot          | all-tables          | action is "pokey pokey"; hack to wake up the bot |

# Thoughts about a new per-player event channel
Surprise! There already is one, for chat only: "events/player/<channel>/"
For player-to-player chat, the channel name is basically the two player's primary keys: https://gitlab.com/offby1/bridge-server/blob/main/project/app/models/message.py#L78

e.g.

    : DEBUG channelmanager.py(14) get_channels_for_request (<ASGIRequest: GET '/events/player/players:1_44/'>, {'channel': 'players:1_44'}) {}

I suppose I could introduce a new channel with a name like {'channel': 'system:player:1'}, which would be for messages *from* the system *to* player 1.

The intended recipients are: the new API bot.  Maaaaaaybe browsers.

Note that I doubt I can teach the bot to listen on more than one channel at a time -- that'd require something like "select" for HTTP, and I can't think of any such thing offhand -- so I imagine I'm gonna have to have the bot listen *only* to this new, per-player, channel.

So, what events would we send on that channel?  Answer: anything of any possible interest to an API bot logged in as that player.  E.g.:
* those same player-to-player chat messages, maybe
* chat messages sent to the lobby, if I am indeed in the lobby
* anything of interest to the table at which I'm sitting:
** chat messages sent to the table at which I'm sitting, if I am indeed sitting at a table
** issuance of a new hand
** calls and plays
** score for the previous hand
