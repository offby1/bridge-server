* How ~tz_detect~ Works
:PROPERTIES:
:UNNUMBERED: notoc
:END:
** overview
The goal: ensure that aware timestamps in django's db, regardless of their time zone offset, are displayed in the browser using the browser's current time zone.

E.g., if the database has an entry whose timestamp is `2025-06-13 02:11:48+00`, and my browser is set to Pacific Daylight Time, the browser should display that as (depending on the formatting) `Thu Jun 12 19:11:48 PDT 2025`.

Also, form entry should work the other way: if I enter `Thu Jun 12 19:11:48 PDT 2025` into a timestamp form, the value saved to the db should be `2025-06-13 02:11:48+00`.

So this requires that Django "knows" the browser's time zone, and convert accordingly.

** How does Django "know" the browser's time zone?

- My ~base.html~ includes ~{% load tz_detect %}~
- That template library, I guess, "injects" ~tz_detect/detector.html~, and sets some template variables
- The injected template runs some JS which generates and injects *more* JS which loads ~tzdetect.js~
- ~tzdetect.js~, at load time, does a POST of both the browser's offset in minutes, and the browser's timezone name (e.g. ~America/Los_Angeles~) to a view named ~tz_detect__set~, aka ~SetOffsetView~
- That view, unsurprisingly, extracts both those values, and ignores the offset ðŸ¤·, and stores the timezone name in ~request.session["detected_tz"]~
- The ~TimezoneMiddleware~ assigns the name to ~tz~, then does ~timezone.activate(pytz.timezone(tz))~.  I bet this is the problem; iirc, ~pytz~ timezones are tricky (as opposed to the built-in ~zoneinfo.ZoneInfo~ thingies).

Yep, check this out: [[https://github.com/django/django/blob/main/django/utils/timezone.py#L245][Django is indeed using ~replace~ as I am here]].

#+BEGIN_EXAMPLE

In [1]: import pytz
In [5]: import zoneinfo

In [7]: now().replace(tzinfo=pytz.timezone("America/Los_Angeles")).isoformat()
Out[7]: '2025-06-13T15:27:46.056821-07:53'

In [8]: now().replace(tzinfo=zoneinfo.ZoneInfo("America/Los_Angeles")).isoformat()
Out[8]: '2025-06-13T15:27:53.645348-07:00'

#+END_EXAMPLE

*** But ...

- I've only ever seen the problem on the admin site; and that site, afaik, doesn't load my base template.  So what activates all this tz_detect mojo?
  that site is the only place in my code where I submit a form with a datetime.
- If pytz is *that* broken, why do we only see the problem in forms (as opposed to, say, displaying timestamps that come from data in the db)
  because only forms invoke `datetime.replace`
- If pytz that *that* broken, why does anyone even use it?

** How does Django convert to a different zone?

Dunno but I'd guess it's during form cleaning and template rendering.
[[file:///Users/not-workme/git-repositories/3rd-party/django/docs/_build/html/topics/i18n/timezones.html#default-current-time-zone][Described here.]]
