STILL TODO:

* Occasionally some page will take ages to load.  Like, right now http://localhost:8000/players/?lookin_for_love=True took 34 seconds.

  There are only 17 players.

  Nothing of interest in the stdout or stderr of daphne.

  I didn't think to look in the Django debug toolbar for timing info.

  <https://developer.chrome.com/docs/devtools/network/reference/#timing-explanation> says
  > Queueing. The browser queues requests before connection start and when:
  >    There are higher priority requests.
  >    There are already six TCP connections open for this origin, which is the limit. Applies to HTTP/1.0 and HTTP/1.1 only.

  I wonder if that's pertinent.  The browser is indeed using HTTP/1.1 (as revealed by opening the developer tools, clicking the "Network" tab, right-clicking any column, and selecting Protocol from the menu)

* If the above are true, but it's not request.user's turn to call, disable the bidding box visually somehow.

* The auction history is one call per line, but I think newspapers used to display it with four columns -- one for each seat.  I think.

* Think about optimization (without actually doing it, since that would be premature):
  Seems we're sending events to a "public" channel, which means if we have 1,000 browsers listening for those events, most of them will ignore most events (since bob only cares about events that affect him).

  So, consider which events really need to be public, and which can be "private".

  e.g player_detail_view sends "splitsville" in response to a player clicking the button, but surely only (at most) four players need to know about this *instantly*; other people can reload the page to find out who's partnered with whom.

  Otoh, a given player probably won't send that many messages; and sending a message is likely cheaper than rendering and returning a whole response, so ... ðŸ¤·

* when brenda speaks to james, but james' browser is looking at anything other than brenda's page, james needs to get an alert.

* chat log should scroll to bottom on page load.

  Otherwise, if it's got a lotta crap in it, I wind up looking at the oldest (i.e., least-interesting) stuff.

* splitsville for someone seated needs to update the table detail that shows at the bottom of the page.

* django_web_messages (as opposed to my chat messages) aren't displayed as soon as they're generated; instead, I only notice them when I refresh the page, and then there's a backlog.

  I assume django_web_messages is designed to display only when I refresh the page; although istr seeing something somewhere that makes them pop up as alerts or something.

* Maybe give some idea of user activity, in the lobby: e.g. if a user's "last_login" was a while ago, make the font dim; or if they last posted a chat message or sat at a table or took an action in a game.

* when bob logs out, his name should vanish from the "lobby"

  ... although if I'm consistent, bob shouldn't be in the lobby if he's never logged in; and yet, my "generate_fake_data" tool creates lots of users who have never logged in.  Maybe I should teach it to log half of the in, or something.

  It's not obvious how to tell if a player is logged in.  There's a `django_sessions` table which appears to hold, I guess, cookie data; but it's not obvious how I can connect that to a Player.

* paginate the table list
  <https://spookylukey.github.io/django-views-the-right-way/list-view.html#displaying-a-list-of-objects> has an example
  or maybe just use datatables

* figure out why "generate_fake_data" only creates 7 players per second -- it otta do hundreds.

  Unit tests seem slow, too.

* Provide a view or two that shows what a player has done in the past.
  In particular, what tables they played at, and who else was at those tables.

DONE:

* I had four browser windows open, each to a different player; all 4 players were seated at the same table.

  I clicked "splitsville" on one of them, then reloaded the others.  Each of the other three displayed

  AttributeError at /table/1
  'NoneType' object has no attribute 'name'
  /Users/not-workme/git-repositories/me/bridge/server/project/app/models/table.py, line 71, in libraryThing
  seat <Seat: EAST at Table 1 (NORTH: bob, EAST: None, SOUTH: aimee, WEST: None)>

* reload or hide (as appropriate) the bidding box when we get the "someone just made a call" message.

* bob is able to call at someone else's table!!

* catch the "illegal call" thing somewhere and return it as an HttpResponseForbidden or similar

* Only show bidding box if auction is incomplete, *and* request.user is seated at the table.

* AttributeError at /players/
  http://192.168.4.39:8000/players/?seated=False&lookin_for_love=False&exclude_me=True

  'AnonymousUser' object has no attribute 'player'

* DEAL THEM CARDS!!!

* the coverage report has a lot of "empty"s near the right margin, and "coverage html" prints `CoverageWarning: No contexts were measured`

* when not logged in, we still attempt to listen to server-sent events ... but fail with 400 (cuz that endpoint requires authentication, I guess).

  - I've definitely seen this recently, but ... I can't think of any page that calls addEventListener that doesn't also require login.

* The new "lobby view" ("/players/?seated=False") doesn't tell you how many *total* players there are.  (Because I nuked the " 3 / 15 players" thing)

  - Sure it does.  At least, it has done since I added Datatables.

* REGRESSION
  When sending a chat message, but failing -- because e.g. you or the recipient are seated at a table, there's no feedback about the failure.  Either
  - pop up a dialog with the body of the 403 response; and/or
  - just don't have the text area and "talk with" button visible in the first place.

  I guess I gotta fiddle with https://htmx.org/events/#htmx:responseError

* The datatables default of 10 entries per page isn't enough; make it 100 or something.

* See "trouble" in this directory.
  Dunno what happened exactly, but I had one browser window logged in as kelly, looking at anne, another (private) window logged in as anne and looking at kelly; and a mobile browser logged in as brett, looking at kelly.

  I tried sending a message from the first window (i.e., from kelly -> anne) and noticed that nothing happened.  I sent a message from the second window (anne -> kelly) and that worked OK.  Then after a while I saw the stack trace in "trouble".

  - gonna assume I fixed this, but ðŸ¤·

* Oy
  So anne is logged in, looking at kelly's page.
  kelly is anne's partner.
  brett is logged in, also looking at Kelly's page.
  When anne splitsvilles, brett doesn't find out.
  I think this means that the "viewer.pk" bit of the channel needs to be optional.
  Anyone who looks at a subject will subscribe to that empty-viewer channel, except for ... I guess ... the subject in question, or their partner.

* paginated the player list a while ago, by using datatables, which gives me pagination for free.

* rename the "foo-html-partial.html" files to "foo-partial.html"

* sam is looking at his own page
  bob is looging at sam's page
  They are partners
  sam clicks "Splitsville"
  bob's page doesn't update
  I suspect I need to spray more messages -- one to subject, viewer, and subject's partner

* I am sending the same blob of HTML to all browsers.  Specifically, if abigail and juan are partners, and each is looking at Juan's page, after some splitsville and parter-up, I see
    Hello, Juan
    juan: muh partner
  I think I need the channel to include both the logged-in user, and the "subject" (i.e., the user whose ID is in the URL); only then will the view have enough information to render the stuff correctly.

* BEEG BOOG: logged in as abigail on the phone, looking at the page for alan.
  meanwhile the browser is logged in as juan, and *it* is also looking at alan's page.
  When juan partners up, abigail sees "JUAN is muh partner" and "their partner is you! juan".

  I suspect I wrote the template partial on the assumption that there were only two people in the world -- the player and their partner.

* It should be blindingly obvious that you have a partner so you don't have to go around looking for another one.

* When someone clicks the "partner up" button, the other person needs to get an alert, telling them that that happened.
  And their "player detail" page, or at least some section of it, needs to refresh so that it now says who their partner is.

* When sending a chat message, make RET submit, so that we don't have to actually click on the button.
  Note that simply using htmx with `hx-trigger="keyup[key=='Enter']"` doesn't work on mobile, since they ain't no key events ðŸ˜­

* The chat log can get annoyingly long -- the new messages are at the bottom, so I gotta scroll to see them.

* When sending a chat message, the newly-appended log line isn't styled quite the same as those logs that were sent by the server when the page loaded.

* Write a player-list partial template.  It should include both the "lookin' for love" filter, and a new "are they in the lobby" filter.
  Use that on both "/players/" and "/lobby/" (distinguished only by different default settings on those filters)
  - It's not a partial; I just made "players" do double-duty

* When displaying the signup page, put text focus on the first field, so I can start typing without having to hit TAB

* Refactor: I've got two almost-but-not-quite-identical chunks of HTML for rendering a chat log: one in the lobby, one in the player detail.
  Ideas:
  âœ“ have a separate template that renders just that, and then stick the output of rendering that into the context of both lobby and player_detail
  âœ˜ use [django-template-partials](https://github.com/carltongibson/django-template-partials)
    - of course that will entail me looking again into HTMX 'cuz carlton sez it's the bee's knees

* when bob partners with tonya, I see `2024-08-16T16:08:06.412297+00:00` `bob` `Partnered with tonya` in the lobby chat, but no "tonya partnered with bob".  On the one hand, this seems fine; on the other hand, I expected to see both messages.
  - Calling this "done" without doing anything; the current behavior seems correct.

* combine PlayerMessage with LobbyMessage.  Maybe if the recipient is NULL that means it's a lobby message?  But then what do I do when I want to have messages directed at a table?  Maybe add a "recipient model" column, so that the target of a message can be NULL (meaning lobby), or anything with a django model.

* Inspired by https://spookylukey.github.io/django-views-the-right-way/, convert some CBVs into function-based views.

* Write my own `@logged_in_as_player_required` decorator, that is like `@login_required`, but checks that there is a corresponding Player object, and redirects with an error message.

* the "lookin' for love" dropdown is always set to "unknown" when the page loads, even if a filter is in effect.
  E.g. <http://localhost:8000/players/?&lookin_for_love=true> correctly displays only partner-ess players, but the dropdown shows "Unknown" when it should show "yes".

  Dunno what I did to fix this, really, apart from making it a lot simpler

* investigate partner weirdness.

  - create two unpartnered players -- `just drop pop --tables=0 --players=2` seems to work
  - log in as player 1
  - go to /player/2/; you'll see "Partner Me Up, Daddy-O"
  - duplicate that page.
  - click the button on one of the pages.  It updates appropriately: the button goes away, and it says "Alice is partnered with Bob" or whatever.
  - go to the other page.  Click its button.  You *should* see either the same "Alice is partnered with Bob" page, or even some sort of exception; but instead it just stays as is.
  - reloading the pages sometimes does nothing, sometimes "fixes" them (i.e., shows what I'd expected)
  - no interesting output in either the Unix console or the JS console
  - only clue: browser's developer tools show the POST data as
    `me=1&them=2&action=partnerup&action=partnerup` -- why is the "action" duplicated?
